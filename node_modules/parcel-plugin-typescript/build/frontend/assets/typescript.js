"use strict";
const tslib_1 = require("tslib");
const config_loader_1 = require("../../backend/config-loader");
const client_1 = require("../../backend/worker/client");
const exports_1 = require("../../exports");
module.exports = function MakeTranspileAsset(name, pkg, options) {
    const { parser } = options;
    const Asset = parser.findParser('file.js');
    return new (class TSAsset extends Asset {
        constructor() {
            super(name, pkg, options);
            this.config = config_loader_1.loadConfiguration(name);
        }
        parse() {
            const _super = name => super[name];
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const config = yield this.config;
                const reportErrors = !config.options.noEmitOnError;
                const result = yield client_1.IPCClient.compile({
                    file: this.name, tsConfig: config.path,
                    reportErrors
                });
                if (!reportErrors) {
                    const { diagnostics } = result;
                    if (diagnostics) {
                        console.error(diagnostics);
                        // tslint:disable:no-string-throw
                        throw 'TypeScript errors were found while compiling';
                    }
                }
                this.contents = exports_1.processSourceMaps(this, result.sources).js;
                // Parse result as ast format through babylon
                return _super("parse").call(this, this.contents);
            });
        }
        generateErrorMessage(err) {
            return err.stack || err.message || err;
        }
    })();
};
//# sourceMappingURL=typescript.js.map