"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("apollo-client"));
__export(require("apollo-link"));
__export(require("apollo-cache-inmemory"));
var apollo_link_1 = require("apollo-link");
var apollo_link_http_1 = require("apollo-link-http");
exports.HttpLink = apollo_link_http_1.HttpLink;
var apollo_link_state_1 = require("apollo-link-state");
var apollo_link_error_1 = require("apollo-link-error");
var apollo_cache_inmemory_1 = require("apollo-cache-inmemory");
exports.InMemoryCache = apollo_cache_inmemory_1.InMemoryCache;
var graphql_tag_1 = require("graphql-tag");
exports.gql = graphql_tag_1.default;
var apollo_client_1 = require("apollo-client");
var DefaultClient = (function (_super) {
    __extends(DefaultClient, _super);
    function DefaultClient(config) {
        var _this = this;
        var cache = config && config.cacheRedirects
            ? new apollo_cache_inmemory_1.InMemoryCache({ cacheRedirects: config.cacheRedirects })
            : new apollo_cache_inmemory_1.InMemoryCache();
        var stateLink = config && config.clientState
            ? apollo_link_state_1.withClientState(__assign({}, config.clientState, { cache: cache }))
            : false;
        var errorLink = config && config.onError
            ? apollo_link_error_1.onError(config.onError)
            : apollo_link_error_1.onError(function (_a) {
                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;
                if (graphQLErrors)
                    graphQLErrors.map(function (_a) {
                        var message = _a.message, locations = _a.locations, path = _a.path;
                        return console.log("[GraphQL error]: Message: " + message + ", Location: " + locations + ", Path: " + path);
                    });
                if (networkError)
                    console.log("[Network error]: " + networkError);
            });
        var requestHandler = config && config.request
            ? new apollo_link_1.ApolloLink(function (operation, forward) {
                return new apollo_link_1.Observable(function (observer) {
                    var handle;
                    Promise.resolve(operation)
                        .then(function (oper) { return config.request(oper); })
                        .then(function () {
                        handle = forward(operation).subscribe({
                            next: observer.next.bind(observer),
                            error: observer.error.bind(observer),
                            complete: observer.complete.bind(observer),
                        });
                    })
                        .catch(observer.error.bind(observer));
                    return function () {
                        if (handle)
                            handle.unsubscribe;
                    };
                });
            })
            : false;
        var httpLink = new apollo_link_http_1.HttpLink({
            uri: (config && config.uri) || '/graphql',
            fetchOptions: (config && config.fetchOptions) || {},
            credentials: 'same-origin',
        });
        var link = apollo_link_1.ApolloLink.from([
            errorLink,
            requestHandler,
            stateLink,
            httpLink,
        ].filter(function (x) { return !!x; }));
        _this = _super.call(this, { cache: cache, link: link }) || this;
        return _this;
    }
    return DefaultClient;
}(apollo_client_1.default));
exports.default = DefaultClient;
//# sourceMappingURL=index.js.map