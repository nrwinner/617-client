{"version":3,"file":"bundle.umd.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n} from 'apollo-link';\nimport { GraphQLError, ExecutionResult } from 'graphql';\n\nexport interface ErrorResponse {\n  graphQLErrors?: GraphQLError[];\n  networkError?: Error;\n  response?: ExecutionResult;\n  operation: Operation;\n}\n\nexport namespace ErrorLink {\n  /**\n   * Callback to be triggered when an error occurs within the link stack.\n   */\n  export interface ErrorHandler {\n    (error: ErrorResponse): void;\n  }\n}\n\n// For backwards compatibility.\nexport import ErrorHandler = ErrorLink.ErrorHandler;\n\nexport const onError = (errorHandler: ErrorHandler): ApolloLink => {\n  return new ApolloLink((operation, forward) => {\n    return new Observable(observer => {\n      let sub;\n      try {\n        sub = forward(operation).subscribe({\n          next: result => {\n            if (result.errors) {\n              errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation,\n              });\n            }\n            observer.next(result);\n          },\n          error: networkError => {\n            errorHandler({\n              operation,\n              networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors: networkError.result && networkError.result.errors,\n            });\n            observer.error(networkError);\n          },\n          complete: observer.complete.bind(observer),\n        });\n      } catch (e) {\n        errorHandler({ networkError: e, operation });\n        observer.error(e);\n      }\n\n      return () => {\n        if (sub) sub.unsubscribe();\n      };\n    });\n  });\n};\n\nexport class ErrorLink extends ApolloLink {\n  private link: ApolloLink;\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super();\n    this.link = onError(errorHandler);\n  }\n\n  public request(\n    operation: Operation,\n    forward: NextLink,\n  ): Observable<FetchResult> | null {\n    return this.link.request(operation, forward);\n  }\n}\n"],"names":["ApolloLink","Observable"],"mappings":";;;;;;;;;;;;;;;;AAAA,QA4Ba,OAAO,GAAG,UAAC,YAA0B;QAChD,OAAO,IAAIA,qBAAU,CAAC,UAAC,SAAS,EAAE,OAAO;YACvC,OAAO,IAAIC,qBAAU,CAAC,UAAA,QAAQ;gBAC5B,IAAI,GAAG,CAAC;gBACR,IAAI;oBACF,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC;wBACjC,IAAI,EAAE,UAAA,MAAM;4BACV,IAAI,MAAM,CAAC,MAAM,EAAE;gCACjB,YAAY,CAAC;oCACX,aAAa,EAAE,MAAM,CAAC,MAAM;oCAC5B,QAAQ,EAAE,MAAM;oCAChB,SAAS,WAAA;iCACV,CAAC,CAAC;6BACJ;4BACD,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBACvB;wBACD,KAAK,EAAE,UAAA,YAAY;4BACjB,YAAY,CAAC;gCACX,SAAS,WAAA;gCACT,YAAY,cAAA;;gCAEZ,aAAa,EAAE,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,CAAC,MAAM;6BACjE,CAAC,CAAC;4BACH,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;yBAC9B;wBACD,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;qBAC3C,CAAC,CAAC;iBACJ;gBAAC,OAAO,CAAC,EAAE;oBACV,YAAY,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;oBAC7C,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACnB;gBAED,OAAO;oBACL,IAAI,GAAG;wBAAE,GAAG,CAAC,WAAW,EAAE,CAAC;iBAC5B,CAAC;aACH,CAAC,CAAC;SACJ,CAAC,CAAC;IACL,CAAC,CAAC;AAEF;QAA+B,6BAAU;QAEvC,mBAAY,YAAoC;YAAhD,YACE,iBAAO,SAER;YADC,KAAI,CAAC,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;SACnC;QAEM,2BAAO,GAAd,UACE,SAAoB,EACpB,OAAiB;YAEjB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SAC9C;QACH,gBAAC;IAAD,CAAC,CAb8BD,qBAAU;;;;;;;;;;;;;"}